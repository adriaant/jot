#!/usr/bin/env python

import sys, glob, os, sqlite3

# Overview:
#   The program is run by typing todo in to the shell followed
#   by a single whitespace, a command that tells it what to do,
#   and possibly some arguments.
# Examples:
#   todo add    
#       --opens the default editor to enter a todo item
#   todo add -m "item text"   
#       --the same thing without using an editor
#   todo version 
#       --displays version information
#   todo config show
#       --opens the configuration file in the default editor
#   todo remove [hash]
#       --removes the todo item with the given hash identifier
#   todo remove last
#       --removes the most recently created todo item
#   todo remove all
#       --removes all todo items
#   todo peers show
#       --lists peers from the todo.config file

def main():
    '''Get, interpret, and pass on any commands'''
    config = { 'peers' : {} } # The default configuration, stored in a dictionary
    config = parseConfig(config)
    if len(sys.argv) > 1:
        command = sys.argv[1]
    else:
        return False
    if len(sys.argv) > 2:
        args = parseArgs(sys.argv[2:])
    else:
        args = []
    if len(args) > 0:
        args = parseArgs(args[1:])
    print sys.argv
    print command
    print args
    return True

def parseArgs(args):
    '''Parse arguments that follow the command'''
    return args

def parseConfig(config,path='~/.todo/todo.config'):
    '''Update configuration with settings from todo.config.'''
    path = matchPath(path)
    configfile = open(path,'r')
    for line in configfile:
        if line[0].isalpha():
            line = line.strip().split()
            if line[1] != '#':
                config[line[0]] = line[1]
    return config

def matchPath(path):
    '''Matches file paths with bash wildcards and shortcuts to an
       absolute path'''
    # Handle references to the home directory
    if path[0] == '~':
        path = os.getenv('HOME') + path[1:]
    # The glob module takes care of bash wildcards
    newPath = glob.glob(path)
    # If glob was unable to match a path, we can't continue.
    if len(newPath) == 0:
        print 'Fatal: Could not match path: "%s"' % path
        return False
    newPath = newPath[0]
    return os.path.abspath(newPath)

def dbConnect(path):
    '''Connects to a sqlite3 db, returns cursor object and success/failure'''
    try:
        connection = sqlite3.connect(path)
        cursor = connection.cursor()
        return cursor,True
    except sqlite3.Error:
        return None,False

if __name__ == '__main__':
    usage = '''
    Usage: todo [command]
    For help: todo help
    '''
    result = main()
    if not result:
        print usage
